// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "transaction.proto" (syntax proto3)
// tslint:disable
import type {
  BinaryWriteOptions,
  IBinaryWriter,
  BinaryReadOptions,
  IBinaryReader,
  PartialMessage,
} from "@protobuf-ts/runtime";
import {
  UnknownFieldHandler,
  WireType,
  reflectionMergePartial,
  MessageType,
} from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message Transaction
 */
export interface Transaction {
  /**
   * @generated from protobuf field: bytes sender_address = 1;
   */
  senderAddress: Uint8Array;
  /**
   * @generated from protobuf field: bytes receiver_address = 2;
   */
  receiverAddress: Uint8Array;
  /**
   * @generated from protobuf field: bytes value = 3;
   */
  value: Uint8Array;
  /**
   * @generated from protobuf field: bytes gas = 4;
   */
  gas: Uint8Array;
  /**
   * @generated from protobuf field: bytes gas_price = 5;
   */
  gasPrice: Uint8Array;
  /**
   * @generated from protobuf field: bytes data = 6;
   */
  data: Uint8Array;
  /**
   * @generated from protobuf field: bytes nonce = 7;
   */
  nonce: Uint8Array;
  /**
   * @generated from protobuf field: uint64 network_id = 8;
   */
  networkId: bigint;
}
/**
 * @generated from protobuf message SignatureData
 */
export interface SignatureData {
  /**
   * @generated from protobuf field: bytes hash = 1;
   */
  hash: Uint8Array;
  /**
   * @generated from protobuf field: bytes signature = 2;
   */
  signature: Uint8Array;
  /**
   * @generated from protobuf field: bytes signer_id = 3;
   */
  signerId: Uint8Array;
}
/**
 * @generated from protobuf message SignedTransaction
 */
export interface SignedTransaction {
  /**
   * @generated from protobuf field: Transaction body = 1;
   */
  body?: Transaction;
  /**
   * @generated from protobuf field: SignatureData sig_data = 2;
   */
  sigData?: SignatureData;
}
// @generated message type with reflection information, may provide speed optimized methods
class Transaction$Type extends MessageType<Transaction> {
  constructor() {
    super("Transaction", [
      {
        no: 1,
        name: "sender_address",
        kind: "scalar",
        T: 12 /*ScalarType.BYTES*/,
      },
      {
        no: 2,
        name: "receiver_address",
        kind: "scalar",
        T: 12 /*ScalarType.BYTES*/,
      },
      { no: 3, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
      { no: 4, name: "gas", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
      { no: 5, name: "gas_price", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
      { no: 6, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
      { no: 7, name: "nonce", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
      {
        no: 8,
        name: "network_id",
        kind: "scalar",
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
    ]);
  }
  create(value?: PartialMessage<Transaction>): Transaction {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    const message = globalThis.Object.create(this.messagePrototype!);
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    message.senderAddress = new Uint8Array(0);
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    message.receiverAddress = new Uint8Array(0);
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    message.value = new Uint8Array(0);
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    message.gas = new Uint8Array(0);
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    message.gasPrice = new Uint8Array(0);
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    message.data = new Uint8Array(0);
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    message.nonce = new Uint8Array(0);
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    message.networkId = 0n;
    if (value !== undefined)
      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
      reflectionMergePartial<Transaction>(this, message, value);
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: Transaction,
  ): Transaction {
    const message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* bytes sender_address */ 1:
          message.senderAddress = reader.bytes();
          break;
        case /* bytes receiver_address */ 2:
          message.receiverAddress = reader.bytes();
          break;
        case /* bytes value */ 3:
          message.value = reader.bytes();
          break;
        case /* bytes gas */ 4:
          message.gas = reader.bytes();
          break;
        case /* bytes gas_price */ 5:
          message.gasPrice = reader.bytes();
          break;
        case /* bytes data */ 6:
          message.data = reader.bytes();
          break;
        case /* bytes nonce */ 7:
          message.nonce = reader.bytes();
          break;
        case /* uint64 network_id */ 8:
          message.networkId = reader.uint64().toBigInt();
          break;
        default:
          // eslint-disable-next-line no-case-declarations
          const u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          // eslint-disable-next-line no-case-declarations
          const d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: Transaction,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* bytes sender_address = 1; */
    if (message.senderAddress.length)
      writer.tag(1, WireType.LengthDelimited).bytes(message.senderAddress);
    /* bytes receiver_address = 2; */
    if (message.receiverAddress.length)
      writer.tag(2, WireType.LengthDelimited).bytes(message.receiverAddress);
    /* bytes value = 3; */
    if (message.value.length)
      writer.tag(3, WireType.LengthDelimited).bytes(message.value);
    /* bytes gas = 4; */
    if (message.gas.length)
      writer.tag(4, WireType.LengthDelimited).bytes(message.gas);
    /* bytes gas_price = 5; */
    if (message.gasPrice.length)
      writer.tag(5, WireType.LengthDelimited).bytes(message.gasPrice);
    /* bytes data = 6; */
    if (message.data.length)
      writer.tag(6, WireType.LengthDelimited).bytes(message.data);
    /* bytes nonce = 7; */
    if (message.nonce.length)
      writer.tag(7, WireType.LengthDelimited).bytes(message.nonce);
    /* uint64 network_id = 8; */
    if (message.networkId !== 0n)
      writer.tag(8, WireType.Varint).uint64(message.networkId);
    const u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message Transaction
 */
export const Transaction = new Transaction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignatureData$Type extends MessageType<SignatureData> {
  constructor() {
    super("SignatureData", [
      { no: 1, name: "hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
      { no: 2, name: "signature", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
      { no: 3, name: "signer_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
    ]);
  }
  create(value?: PartialMessage<SignatureData>): SignatureData {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    const message = globalThis.Object.create(this.messagePrototype!);
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    message.hash = new Uint8Array(0);
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    message.signature = new Uint8Array(0);
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    message.signerId = new Uint8Array(0);
    if (value !== undefined)
      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
      reflectionMergePartial<SignatureData>(this, message, value);
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: SignatureData,
  ): SignatureData {
    const message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* bytes hash */ 1:
          message.hash = reader.bytes();
          break;
        case /* bytes signature */ 2:
          message.signature = reader.bytes();
          break;
        case /* bytes signer_id */ 3:
          message.signerId = reader.bytes();
          break;
        default:
          // eslint-disable-next-line no-case-declarations
          const u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          // eslint-disable-next-line no-case-declarations
          const d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: SignatureData,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* bytes hash = 1; */
    if (message.hash.length)
      writer.tag(1, WireType.LengthDelimited).bytes(message.hash);
    /* bytes signature = 2; */
    if (message.signature.length)
      writer.tag(2, WireType.LengthDelimited).bytes(message.signature);
    /* bytes signer_id = 3; */
    if (message.signerId.length)
      writer.tag(3, WireType.LengthDelimited).bytes(message.signerId);
    const u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message SignatureData
 */
export const SignatureData = new SignatureData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignedTransaction$Type extends MessageType<SignedTransaction> {
  constructor() {
    super("SignedTransaction", [
      { no: 1, name: "body", kind: "message", T: () => Transaction },
      { no: 2, name: "sig_data", kind: "message", T: () => SignatureData },
    ]);
  }
  create(value?: PartialMessage<SignedTransaction>): SignedTransaction {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
      reflectionMergePartial<SignedTransaction>(this, message, value);
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: SignedTransaction,
  ): SignedTransaction {
    const message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* Transaction body */ 1:
          message.body = Transaction.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.body,
          );
          break;
        case /* SignatureData sig_data */ 2:
          message.sigData = SignatureData.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.sigData,
          );
          break;
        default:
          // eslint-disable-next-line no-case-declarations
          const u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          // eslint-disable-next-line no-case-declarations
          const d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: SignedTransaction,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* Transaction body = 1; */
    if (message.body)
      Transaction.internalBinaryWrite(
        message.body,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* SignatureData sig_data = 2; */
    if (message.sigData)
      SignatureData.internalBinaryWrite(
        message.sigData,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    const u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message SignedTransaction
 */
export const SignedTransaction = new SignedTransaction$Type();
